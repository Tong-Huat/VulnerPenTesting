#!/bin/bash
#Student: Phua Tong Huat, S32
#Class Code: CFC020823
#Trainer: Kar Wei

#Get directory name to save scan results and if user want the results to be zipped
function getDirName()
{
echo "Please enter directory name to save scan results: "
read dir_name

#Remove special characters from the input if any
dir_name=${dir_name//[!A-Za-z0-9]/}

# Check if the directory name is empty, exit if empty
if [ -z "$dir_name" ]; 
then
	echo "Error: Directory name cannot be empty."
	exit 
fi

#Check if directory exists, create new dir if not exist
if [ -d "$dir_name" ]; then
    echo "Directory $dir_name already exists!"
    echo "Previous scan results might be overwritten. Exit now if do not wish for previous scan results to be overwritten!!"
else
    mkdir $dir_name
    echo "Directory $dir_name has been created."
#Create file to compile all scanned results
    touch ./$dir_name/fullReport.txt
    echo "The final scan report will be compiled and saved into ./$dir_name/fullReport.txt"
fi
#Ask user if want to zip the scan reports
echo "Do you want to zip the scan results? (yes/no) "
read ifZIP
if [ $ifZIP == "yes" ];
then
	echo "All results will be saved into a ZIP file at the end of the scan"
fi
getNetwork

}

#Get network or IP address from user to scan 
function getNetwork()
{
echo "Please enter network or IP address to scan: "
	read networkToScan
	validateIP 
}

#function to validate IP input by user and for user to select scan mode if validation is successful
function validateIP()
{
if [[ $networkToScan =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))$ ]] || [[ $networkToScan =~ ^(([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))\.){3}([1-9]?[0-9]|1[0-9][0-9]|2([0-4][0-9]|5[0-5]))(\/([8-9]|[1-2][0-9]|3[0-2]))([^0-9.]|$) ]] ; 
then
    selectScanMode
else
    echo "The input is not a valid network. Please enter a valid network address with CIDR notation or an IP address. Exiting now... "
	exit
fi
}


#Get user to select basic or full scan and validate the input. 
function selectScanMode()
{
	echo "Please enter 'Basic' for basic Scan or 'Full' for full scan"
    echo "1. Basic Scan will scan for TCP and UDP ports, service version and check for weak passwords."
    echo "2. Full Scan will include Basic Scan plus Vulnerability Analysis"
    read scanMode
    validateScanModeInput
}

#function to validate the selected scan mode and start scan
function validateScanModeInput()
{
#returns to select scan mode if input not Basic or Full
if [ $scanMode != "Full" ] && [ $scanMode != "Basic" ]; 
then
    echo "Invalid scan type. Please enter 'Full' or 'Basic'."
    selectScanMode
fi

# if user chose basic scan, perform basic scan
if [ $scanMode == "Basic" ]; then
    basicScan
fi

# if user chose full scan, perform full scan
if [ $scanMode == "Full" ]; then
    fullScan
fi

}

#function to perform basic scan
function basicScan()
{
	echo "    ***Performing Basic scan...***"
	echo "    ***Performing TCP scan***"
	echo "    ###Basic Scan Result###" >> ./$dir_name/fullReport.txt
	sudo nmap -sV -p 1-65535 $networkToScan -oG ./$dir_name/tcpScan.txt
	cat ./$dir_name/tcpScan.txt >> ./$dir_name/fullReport.txt
	echo "" >> ./$dir_name/fullReport.txt
	echo "    ***TCP scan done***"
	echo "    ***Performing UDP scan***"
	sudo masscan -pU:1-65535 --rate 2000 $networkToScan -oG ./$dir_name/udpScan.txt
	cat ./$dir_name/udpScan.txt
	cat ./$dir_name/udpScan.txt >> ./$dir_name/fullReport.txt
	echo "" >> ./$dir_name/fullReport.txt
	echo "    ***UDP scan done***"
	initPWcheck
}

#function to perform full scan
function fullScan()
{
	echo "    ***Performing Full scan...***"
	echo "    ***Performing TCP scan and Vulnerability Analysis***"
	echo "    ###Full Scan Result###" >> ./$dir_name/fullReport.txt
	sudo nmap -sV -p 1-65535 --script=vulners $networkToScan -oG ./$dir_name/tcpVulnerScan.txt
	cat ./$dir_name/tcpVulnerScan.txt >> ./$dir_name/fullReport.txt
	echo "" >> ./$dir_name/fullReport.txt
	echo "    ***TCP scan and VA done***"
	echo "    ***Performing UDP scan***"
	sudo masscan -pU:1-65535 --rate 2000 $networkToScan -oG ./$dir_name/udpScan.txt
	cat ./$dir_name/udpScan.txt
	cat ./$dir_name/udpScan.txt >> ./$dir_name/fullReport.txt
	echo "" >> ./$dir_name/fullReport.txt
	echo "    ***UDP scan done***"
	initPWcheck
}

#function to initiate weak password checks, ask user for list of usernames and pw if any
function initPWcheck()
{
#default username and pw lists if user has no lists
	pwList="./defaultPwList.txt"
	userList="./defaultUsernameList.txt"

echo "***Starting weak passwords checks***"
#ask user if they have their own username list 
	echo "Do you have your own username list to use? (yes/no) "
	read ownUserList
if [ $ownUserList == "yes" ];
then
#switch to user's list if have
	echo "Please enter the file path to your username list: "
	read usernameList
	userList=$usernameList
fi

#ask user if they have their own password list 
	echo "Do you have your own password list to check? (yes/no) "
	read ownPwList
if [ $ownPwList == "yes" ];
then
#switch to user's list if have
	echo "Please enter the file path to your password list: "
	read userPWList
	pwList=$userPWList
fi

#inform user which list is being used for pw checks
echo "    ***Using $userList for usernames***"
echo "    ***Using $pwList for passwords***"

bruteForce
}

#function to get IP address with open ports to brute force respective services
function bruteForce()
{
#PW checks on FTP port 21
echo "    ###FTP Credential Check Result###" >> ./$dir_name/fullReport.txt
	echo "    ***Performing PW checks on FTP***"
#get list of IP address with ftp port 21 opened
	nmap -n -Pn -T4 -sT -p T:21 -oG ./$dir_name/ftpscan.txt $networkToScan
	grep open ./$dir_name/ftpscan.txt | awk {'print $2'} | tee ./$dir_name/ftp_targets.txt
#brute force list of IP with ftp port 21 opened
	medusa -H ./$dir_name/ftp_targets.txt -U $userList -P $pwList -M ftp -e ns| tee ./$dir_name/ftp_pwcheck_scan.txt
	echo "    ***Password checks on FTP done.***"
	echo "    ***Scan results saved in ./$dir_name/ftp_pwcheck_scan.txt"
	cat ./$dir_name/ftp_pwcheck_scan.txt >> ./$dir_name/fullReport.txt
	echo "" >> ./$dir_name/fullReport.txt
	
#PW checks on SSH port 22
	echo "    ***Performing PW checks on SSH***"
	echo "    ###SSH Credential Check Result###" >> ./$dir_name/fullReport.txt
#get list of IP address with SSH port 22 opened
	nmap -n -Pn -T4 -sT -p T:22 -oG ./$dir_name/SSHscan.txt $networkToScan
	grep open ./$dir_name/SSHscan.txt | awk {'print $2'} | tee ./$dir_name/SSH_targetList.txt
#brute force list of IP with SSH port 22 opened
	medusa -H ./$dir_name/SSH_targetList.txt -U $userList -P $pwList -M ssh -e ns | tee ./$dir_name/SSH_pwcheck_scan.txt
	echo "    ***Password checks on SSH done***"
	echo "    ***Scan result saved in ./$dir_name/SSH_pwcheck_scan.txt"
	cat ./$dir_name/SSH_pwcheck_scan.txt >> ./$dir_name/fullReport.txt
	echo "" >> ./$dir_name/fullReport.txt
	
#PW checks on telnet port 23
	echo "    ***Performing PW checks on Telnet***"
	echo "    ###Telnet Credential Check Result###" >> ./$dir_name/fullReport.txt
#get list of IP address with Telnet port 23 opened
	nmap -n -Pn -T4 -sT -p T:23 -oG ./$dir_name/telnetscan.txt $networkToScan
	grep open ./$dir_name/telnetscan.txt | awk {'print $2'} | tee ./$dir_name/telnet_targetList.txt
#brute force list of IP address with Telnet port 23 opened
	medusa -H ./$dir_name/telnet_targetList.txt -U $userList -P $pwList -M telnet -e ns | tee ./$dir_name/telnet_pwcheck_scan.txt
	echo "    ***Password checks on Telnet done"
	echo "    ***Scan result saved in ./$dir_name/telnet_pwcheck_scan.txt"
	cat ./$dir_name/telnet_pwcheck_scan.txt >> ./$dir_name/fullReport.txt
	echo "" >> ./$dir_name/fullReport.txt
	
#PW checks on RDP port 3389
	echo "    ***Performing PW checks on RDP***"
	echo "    ###RDP Credential Check Result###" >> ./$dir_name/fullReport.txt
#get list of IP address with RDP port 3389 opened
	nmap -n -Pn -T4 -sT -p T:3389 -oG ./$dir_name/RDPscan.txt $networkToScan
	grep open ./$dir_name/RDPscan.txt | awk {'print $2'} | tee ./$dir_name/RDP_targetList.txt
#brute force list of IP address with RDP port 3389 opened
	medusa -H ./$dir_name/RDP_targetList.txt -U $userList -P $pwList -M RDP -e ns | tee ./$dir_name/RDP_pwcheck_scan.txt
	echo "    ***Password checks on RDP done"
	echo "    ***Scan result saved in ./$dir_name/RDP_pwcheck_scan.txt"
	cat ./$dir_name/RDP_pwcheck_scan.txt >> ./$dir_name/fullReport.txt
	echo "" >> ./$dir_name/fullReport.txt
	
	

#display compiled report
showReport

#initiate function to zip file if user chose to do so
zipFile

#initiate search function
searchKeyword
}

function showReport()
{
echo "    ***All scans has been completed and please see the full report.***  "
cat ./"$dir_name"/fullReport.txt
echo "    ***The above report can be found at: ./"$dir_name"/fullReport.txt."
}

#function to save all scan results into zip file
function zipFile()
{
#get current timestamp
timestamp=$(date +%Y%m%d%H%M%S)

if [ $ifZIP == "yes" ];
then
	echo "    ***Zipping files in $dir_name"_"$timestamp***"
	cd $dir_name
	zip -r $dir_name *
	echo "The files inside $dir_name have been saved into $dir_name"_"$timestamp"
fi

}

function searchKeyword()
{
#ask user if wants to do a search in the report
while true; 
do
	echo "Do you want to search within the report? (yes/no)"
	read user_choice
#remove special characters in user input
	user_choice=${user_choice//[!A-Za-z0-9]/}



#exit program if user do not want to do a search
	if [[ $user_choice == "no" ]]; 
	then
		echo "Thats all folks. Exiting now! "
		exit
#proceed to search within final report if user wants to
	elif [[ $user_choice == "yes" ]]; 
	then
		echo "Please enter the keyword you want to search for:"
		read keyword

#validate that keyword cannot be null
		if [[ -z $keyword ]]; 
		then
			echo "Search invalid. Keyword cannot be null."
		else
#search for the keyword in report
			report="$(pwd)/fullReport.txt"
			results=$(grep "$keyword" $report)

#returns no match if result is null, returns result if valid search
			if [[ -z $results ]]; 
			then
				echo "No match for keyword"
			else
				echo "$results"
			fi
		fi
	else
#prompt user to enter correct input 
		echo "Invalid input. Please enter yes or no."
	fi
done
}

getDirName





